'''
Refactoring Miner class, implement detect method to detect refactoring operations in a commit
'''

import os
import pathlib
import shutil


class Miner:
    def __init__(self, path):
        self.path = path
    def detect(self, repository, output, commitID: str):
        pass


class RefactoringMiner(Miner):
    def __init__(self, path):
        super().__init__(path)
        self.RMPath = path

    def detect(self, repository, output, commitID: str):
        '''
        use RefactoringMiner to detect refactoring operations in a commit
        :param repository: repository path
        :param output: output directory
        :param commitID:
        :return: output json file path
        '''
        command = self.RMPath + ' -c ' + repository + ' ' + commitID + ' -json ' + output + "/" + commitID + ".json"
        os.system(command)


def remove_redundant_git_files(directory):
    """
    Remove the .git-xxxxxx file generated by RefDiff.
    RefDiff will generate a .git file for each commit, which is redundant
    :return:
    """
    for entry in os.scandir(directory):
        if entry.is_dir() and entry.name.startswith('.git'):
            folder_path = entry.path
            print("remove folder:", folder_path)
            shutil.rmtree(folder_path)


class RefDiff(Miner):
    def __init__(self, path):
        super().__init__(path)
        self.RDpath = path

    def detect(self, repository: str, output, commitID):
        repo_name = repository.split("/")[-1]
        repo_root = repository.split(repo_name)[0]
        command = f"java -jar {self.RDpath} -r {repo_root} -n {repo_name} -o {output} -c {commitID}"
        os.system(command)


if __name__ == "__main__":
    path = "/Users/leichen/Code/pythonProject/pythonProject/pythonProject/SCRMDetection/experiment/output/result/my-refactoring-toy-example/2/refs"
    remove_redundant_git_files(os.path.dirname(path))